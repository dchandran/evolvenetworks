# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sim', [dirname(__file__)])
        except ImportError:
            import _sim
            return _sim
        if fp is not None:
            try:
                _mod = imp.load_module('_sim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sim = swig_import_helper()
    del swig_import_helper
else:
    import _sim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def ODEevents(*args):
  return _sim.ODEevents(*args)
ODEevents = _sim.ODEevents

def ODEflags(*args):
  return _sim.ODEflags(*args)
ODEflags = _sim.ODEflags

def ODEtolerance(*args):
  return _sim.ODEtolerance(*args)
ODEtolerance = _sim.ODEtolerance

def ODEsim(*args):
  return _sim.ODEsim(*args)
ODEsim = _sim.ODEsim

def ODEsim2(*args):
  return _sim.ODEsim2(*args)
ODEsim2 = _sim.ODEsim2

def jacobian(*args):
  return _sim.jacobian(*args)
jacobian = _sim.jacobian

def jacobian2(*args):
  return _sim.jacobian2(*args)
jacobian2 = _sim.jacobian2

def steadyState(*args):
  return _sim.steadyState(*args)
steadyState = _sim.steadyState

def steadyState2(*args):
  return _sim.steadyState2(*args)
steadyState2 = _sim.steadyState2

def getDerivatives(*args):
  return _sim.getDerivatives(*args)
getDerivatives = _sim.getDerivatives

def getDerivatives2(*args):
  return _sim.getDerivatives2(*args)
getDerivatives2 = _sim.getDerivatives2

def SSA(*args):
  return _sim.SSA(*args)
SSA = _sim.SSA

def getRatesFromSimulatedData(*args):
  return _sim.getRatesFromSimulatedData(*args)
getRatesFromSimulatedData = _sim.getRatesFromSimulatedData

def Langevin(*args):
  return _sim.Langevin(*args)
Langevin = _sim.Langevin

def cells_ssa(*args):
  return _sim.cells_ssa(*args)
cells_ssa = _sim.cells_ssa

def new_array(*args):
  return _sim.new_array(*args)
new_array = _sim.new_array

def get_value(*args):
  return _sim.get_value(*args)
get_value = _sim.get_value

def get_value2D(*args):
  return _sim.get_value2D(*args)
get_value2D = _sim.get_value2D

def set_value(*args):
  return _sim.set_value(*args)
set_value = _sim.set_value

def set_value2D(*args):
  return _sim.set_value2D(*args)
set_value2D = _sim.set_value2D

def SIM_PYTHON_ODE_FUNCTION(*args):
  return _sim.SIM_PYTHON_ODE_FUNCTION(*args)
SIM_PYTHON_ODE_FUNCTION = _sim.SIM_PYTHON_ODE_FUNCTION

def sim_create_callback(*args):
  return _sim.sim_create_callback(*args)
sim_create_callback = _sim.sim_create_callback

def sim_delete_callback():
  return _sim.sim_delete_callback()
sim_delete_callback = _sim.sim_delete_callback

cvar = _sim.cvar

