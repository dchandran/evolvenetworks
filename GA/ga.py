# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ga', [dirname(__file__)])
        except ImportError:
            import _ga
            return _ga
        if fp is not None:
            try:
                _mod = imp.load_module('_ga', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ga = swig_import_helper()
    del swig_import_helper
else:
    import _ga
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def GAinit(*args):
  return _ga.GAinit(*args)
GAinit = _ga.GAinit

def GArun(*args):
  return _ga.GArun(*args)
GArun = _ga.GArun

def GArouletteWheelSelection(*args):
  return _ga.GArouletteWheelSelection(*args)
GArouletteWheelSelection = _ga.GArouletteWheelSelection

def GAtournamentSelection(*args):
  return _ga.GAtournamentSelection(*args)
GAtournamentSelection = _ga.GAtournamentSelection

def GAeliteSelection(*args):
  return _ga.GAeliteSelection(*args)
GAeliteSelection = _ga.GAeliteSelection

def GAhyperbolicSelection(*args):
  return _ga.GAhyperbolicSelection(*args)
GAhyperbolicSelection = _ga.GAhyperbolicSelection

def GAsetupNewStruct(*args):
  return _ga.GAsetupNewStruct(*args)
GAsetupNewStruct = _ga.GAsetupNewStruct

def GAsetFitnessFunction(*args):
  return _ga.GAsetFitnessFunction(*args)
GAsetFitnessFunction = _ga.GAsetFitnessFunction

def GAsetCrossoverFunction(*args):
  return _ga.GAsetCrossoverFunction(*args)
GAsetCrossoverFunction = _ga.GAsetCrossoverFunction

def GAsetMutationFunction(*args):
  return _ga.GAsetMutationFunction(*args)
GAsetMutationFunction = _ga.GAsetMutationFunction

def GAsetSelectionFunction(*args):
  return _ga.GAsetSelectionFunction(*args)
GAsetSelectionFunction = _ga.GAsetSelectionFunction

def GAgetFitnessFunction():
  return _ga.GAgetFitnessFunction()
GAgetFitnessFunction = _ga.GAgetFitnessFunction

def GAgetCrossoverFunction():
  return _ga.GAgetCrossoverFunction()
GAgetCrossoverFunction = _ga.GAgetCrossoverFunction

def GAgetMutationFunction():
  return _ga.GAgetMutationFunction()
GAgetMutationFunction = _ga.GAgetMutationFunction

def GAgetSelectionFunction():
  return _ga.GAgetSelectionFunction()
GAgetSelectionFunction = _ga.GAgetSelectionFunction

def GAnextGen(*args):
  return _ga.GAnextGen(*args)
GAnextGen = _ga.GAnextGen

def GAfree(*args):
  return _ga.GAfree(*args)
GAfree = _ga.GAfree
class ReactionNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReactionNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReactionNetwork, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _ga.ReactionNetwork_type_set
    __swig_getmethods__["type"] = _ga.ReactionNetwork_type_get
    if _newclass:type = _swig_property(_ga.ReactionNetwork_type_get, _ga.ReactionNetwork_type_set)
    __swig_setmethods__["network"] = _ga.ReactionNetwork_network_set
    __swig_getmethods__["network"] = _ga.ReactionNetwork_network_get
    if _newclass:network = _swig_property(_ga.ReactionNetwork_network_get, _ga.ReactionNetwork_network_set)
    __swig_setmethods__["initialValues"] = _ga.ReactionNetwork_initialValues_set
    __swig_getmethods__["initialValues"] = _ga.ReactionNetwork_initialValues_get
    if _newclass:initialValues = _swig_property(_ga.ReactionNetwork_initialValues_get, _ga.ReactionNetwork_initialValues_set)
    def __init__(self): 
        this = _ga.new_ReactionNetwork()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ga.delete_ReactionNetwork
    __del__ = lambda self : None;
ReactionNetwork_swigregister = _ga.ReactionNetwork_swigregister
ReactionNetwork_swigregister(ReactionNetwork)


def printNetwork(*args):
  return _ga.printNetwork(*args)
printNetwork = _ga.printNetwork

def printNetworkToFile(*args):
  return _ga.printNetworkToFile(*args)
printNetworkToFile = _ga.printNetworkToFile

def getNumSpecies(*args):
  return _ga.getNumSpecies(*args)
getNumSpecies = _ga.getNumSpecies

def getNumReactions(*args):
  return _ga.getNumReactions(*args)
getNumReactions = _ga.getNumReactions

def getStoichiometryMatrix(*args):
  return _ga.getStoichiometryMatrix(*args)
getStoichiometryMatrix = _ga.getStoichiometryMatrix

def getReactionRates(*args):
  return _ga.getReactionRates(*args)
getReactionRates = _ga.getReactionRates

def lineageTrackingON():
  return _ga.lineageTrackingON()
lineageTrackingON = _ga.lineageTrackingON

def lineageTrackingOFF():
  return _ga.lineageTrackingOFF()
lineageTrackingOFF = _ga.lineageTrackingOFF

def getOriginalParents(*args):
  return _ga.getOriginalParents(*args)
getOriginalParents = _ga.getOriginalParents

def getImmediateParents(*args):
  return _ga.getImmediateParents(*args)
getImmediateParents = _ga.getImmediateParents

def setRatesFunction(*args):
  return _ga.setRatesFunction(*args)
setRatesFunction = _ga.setRatesFunction

def setStoichiometryFunction(*args):
  return _ga.setStoichiometryFunction(*args)
setStoichiometryFunction = _ga.setStoichiometryFunction

def setInitialValues(*args):
  return _ga.setInitialValues(*args)
setInitialValues = _ga.setInitialValues

def getInitialValues(*args):
  return _ga.getInitialValues(*args)
getInitialValues = _ga.getInitialValues

def simulateNetworkODE(*args):
  return _ga.simulateNetworkODE(*args)
simulateNetworkODE = _ga.simulateNetworkODE

def networkSteadyState(*args):
  return _ga.networkSteadyState(*args)
networkSteadyState = _ga.networkSteadyState

def simulateNetworkStochastically(*args):
  return _ga.simulateNetworkStochastically(*args)
simulateNetworkStochastically = _ga.simulateNetworkStochastically

def setFitnessFunction(*args):
  return _ga.setFitnessFunction(*args)
setFitnessFunction = _ga.setFitnessFunction

def setCrossoverFunction(*args):
  return _ga.setCrossoverFunction(*args)
setCrossoverFunction = _ga.setCrossoverFunction

def setMutationFunction(*args):
  return _ga.setMutationFunction(*args)
setMutationFunction = _ga.setMutationFunction

def setNetworkTypeProbability(*args):
  return _ga.setNetworkTypeProbability(*args)
setNetworkTypeProbability = _ga.setNetworkTypeProbability

def setNetworkType(*args):
  return _ga.setNetworkType(*args)
setNetworkType = _ga.setNetworkType

def setNetworkSize(*args):
  return _ga.setNetworkSize(*args)
setNetworkSize = _ga.setNetworkSize

def evolveNetworks(*args):
  return _ga.evolveNetworks(*args)
evolveNetworks = _ga.evolveNetworks

def randomNetworks(*args):
  return _ga.randomNetworks(*args)
randomNetworks = _ga.randomNetworks

def deleteNetwork(*args):
  return _ga.deleteNetwork(*args)
deleteNetwork = _ga.deleteNetwork

def cloneNetwork(*args):
  return _ga.cloneNetwork(*args)
cloneNetwork = _ga.cloneNetwork

def setCrossoverRate(*args):
  return _ga.setCrossoverRate(*args)
setCrossoverRate = _ga.setCrossoverRate

def setAverageInitialValue(*args):
  return _ga.setAverageInitialValue(*args)
setAverageInitialValue = _ga.setAverageInitialValue

def setMutationRateOfInitialValues(*args):
  return _ga.setMutationRateOfInitialValues(*args)
setMutationRateOfInitialValues = _ga.setMutationRateOfInitialValues

def mutateNetwork(*args):
  return _ga.mutateNetwork(*args)
mutateNetwork = _ga.mutateNetwork

def crossoverNetwork(*args):
  return _ga.crossoverNetwork(*args)
crossoverNetwork = _ga.crossoverNetwork

def compareSteadyStates(*args):
  return _ga.compareSteadyStates(*args)
compareSteadyStates = _ga.compareSteadyStates

def enableLogFile(*args):
  return _ga.enableLogFile(*args)
enableLogFile = _ga.enableLogFile

def disableLogFile():
  return _ga.disableLogFile()
disableLogFile = _ga.disableLogFile

def configureContinuousLog(*args):
  return _ga.configureContinuousLog(*args)
configureContinuousLog = _ga.configureContinuousLog

def configureFinalLog(*args):
  return _ga.configureFinalLog(*args)
configureFinalLog = _ga.configureFinalLog

def configureSteadyStateFunction(*args):
  return _ga.configureSteadyStateFunction(*args)
configureSteadyStateFunction = _ga.configureSteadyStateFunction


